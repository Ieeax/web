export function scrollTo(n,t,i){if(n!==null||t!==null){const r={};n===null?r.left=t:r.top=n;i===!0&&(r.behavior="smooth");window.scrollTo(r)}}export function getProperty(n){return window[n]}export function addEventHandler(t,i,r){t in n&&window.removeEventListener(t,n[t]);n[t]=n=>r.invokeMethod(i,t,stringifyEventArgsAsJson(t,n));window.addEventListener(t,n[t])}export function removeEventHandler(t){t in n&&(window.removeEventListener(t,n[t]),delete n[t])}export function stringifyEventArgsAsJson(n,i){switch(n){case"click":case"mouseup":case"mousedown":case"mousemove":return JSON.stringify({Detail:0,ScreenX:i.screenX,ScreenY:i.screenY,ClientX:i.clientX,ClientY:i.clientY,Button:i.button,Buttons:i.buttons,CtrlKey:i.ctrlKey,ShiftKey:i.shiftKey,AltKey:i.altKey,MetaKey:i.metaKey});case"touchstart":case"touchend":case"touchcancel":case"touchmove":return JSON.stringify({Detail:0,Touches:t(i.touches),TargetTouches:t(i.targetTouches),ChangedTouches:t(i.changedTouches),CtrlKey:i.ctrlKey,ShiftKey:i.shiftKey,AltKey:i.altKey,MetaKey:i.metaKey});case"resize":return"{}"}throw new Error("Unknown event '"+n+"'. Event arguments couldn't be parsed.");}function t(n){const t=[];if(!n)return t;for(var i=0;i<n.length;i++){const r=n[i];t.push({Identifier:0,ScreenX:r.screenX,ScreenY:r.screenY,ClientX:r.clientX,ClientY:r.clientY,PageX:r.pageX,PageY:r.pageY})}return t}const n={};