function onMouseDownTest(n){const i=n.composedPath();for(var t=0;t<i.length;t++)if((getInteraction(i[t])&Interaction.Active)===Interaction.Active){_elementActive=i[t];_elementActive.classList.add(CLASS_ACTIVE);window.removeEventListener("mousedown",onMouseDownTest);window.addEventListener("mouseup",onMouseUpTest);return}}function onMouseUpTest(){_elementActive.classList.remove(CLASS_ACTIVE);_elementActive=null;window.removeEventListener("mouseup",onMouseUpTest);window.addEventListener("mousedown",onMouseDownTest)}function onMouseEnterTest(n){const i=n.composedPath();for(var t=0;t<i.length;t++)if((getInteraction(i[t])&Interaction.Hover)===Interaction.Hover){_elementHovered!=null&&_elementHovered.classList.remove(CLASS_HOVER);_elementHovered=i[t];_elementHovered.classList.add(CLASS_HOVER);window.removeEventListener("mouseenter",onMouseEnterTest);window.addEventListener("mouseout",onMouseLeaveTest);return}}function onMouseLeaveTest(n){_elementHovered===n.target&&(_elementHovered.classList.remove(CLASS_HOVER),_elementHovered=null,window.removeEventListener("mouseout",onMouseLeaveTest),window.addEventListener("mouseover",onMouseEnterTest))}function getInteraction(n){if(n instanceof Element){const t=n.getAttribute("data-lx-interaction");if(t===null)return Interaction.None;switch(t){case"1":return Interaction.Hover;case"2":return Interaction.Active;case"3":return Interaction.Hover|Interaction.Active;default:return Interaction.None}}}function init(){_initialized!==!0&&(_initialized=!0,window.addEventListener("mousedown",onMouseDownTest),window.addEventListener("mouseover",onMouseEnterTest))}var Interaction;(function(n){n[n.None=0]="None";n[n.Hover=2]="Hover";n[n.Active=4]="Active"})(Interaction||(Interaction={}));const CLASS_ACTIVE="lx-active",CLASS_HOVER="lx-hover";let _initialized,_elementHovered,_elementActive;init();